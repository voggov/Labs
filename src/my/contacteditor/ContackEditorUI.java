/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.contacteditor;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static java.nio.file.StandardOpenOption.APPEND;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.*;

/**
 * @author user
 */
public class ContackEditorUI extends javax.swing.JFrame implements Serializable {

    /**
     * Creates new form ContackEditorUI
     */
    public ContackEditorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
                jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
                jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Нижняя граница интегрирования: ");

        jLabel2.setText("Верхняя граница интегрирования:");

        jLabel3.setText("Шаг интегрирования:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Нижняя граница интегрирования", "Верхняя граница интегрирования", "Шаг интегрирования", "Результат вычислений"
                }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Добавить");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Вычислить");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Удалить");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Очистить");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Заполнить");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("Диапазон значений: 0.000001 - 1000000");

        jButton6.setText("Сохранить в файл (text)");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Сохранить в файл (binary)");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    saveAsBinary(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                .addContainerGap()
                                                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(37, 37, 37))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jTextField1)
                                                                        .addComponent(jTextField2)
                                                                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                                                                .addGap(79, 79, 79)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(186, 186, 186)
                                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(26, 26, 26)
                                                                .addComponent(jButton4)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButton5)
                                                                .addGap(38, 38, 38)
                                                                .addComponent(jButton6)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jTextField1)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton4)
                                        .addComponent(jButton5)
                                        .addComponent(jButton6)
                                        .addComponent(jButton7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String lowerBound = jTextField1.getText();
        String upperBound = jTextField2.getText();
        String step = jTextField3.getText();
        String tempRes = "-";
        try {
            RecIntegral recIntegral = new RecIntegral(lowerBound, upperBound, step, tempRes);
            if (!checkValue(Integer.parseInt(lowerBound)) || !checkValue(Integer.parseInt(upperBound))
                    || !checkValue(Integer.parseInt(step))) {
                throw new RecIntegralException("Некорректные значения интеграла");
            }
            array.add(recIntegral);
            model.addRow(new Object[]{lowerBound, upperBound, step, tempRes});
        } catch (RecIntegralException ex) {
            JOptionPane.showMessageDialog(this, "Недопустимые значения для интеграла");
        }
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        String lowerBound = jTable1.getModel().getValueAt(row, 0).toString();
        String upperBound = jTable1.getModel().getValueAt(row, 1).toString();
        String step = jTable1.getModel().getValueAt(row, 2).toString();
        Calculation calculation = new Calculation(Double.parseDouble(lowerBound), Double.parseDouble(upperBound), Double.parseDouble(step));
        calculation.start();
        try {
            calculation.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Double result = calculation.getResult();
        jTable1.getModel().setValueAt(result, row, 3);
        array.get(row).addCalcResult(result.toString());
        jTable1.clearSelection();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        model.removeRow(row);
        jTable1.clearSelection();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        File workingDirectory = new File("D:\\ПТУ\\JAVA\\2022\\Lab4 Java\\ContactEditor");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(workingDirectory);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int response = fileChooser.showOpenDialog(this);
        if (response == fileChooser.APPROVE_OPTION) {
            File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
            String name = file.getName();
            String[] arrayList = name.split("\\.");
            if (Objects.equals(arrayList[1], "bin")) {
                try (FileInputStream fin = new FileInputStream(file)) {
                    byte[] buf = new byte[fin.available()];
                    int jopa, count = 0;
                    while ((jopa = fin.read()) != -1) {
                        if (count < buf.length) {
                            buf[count] = (byte) jopa;
                            count++;
                        }
                    }

                    if (buf.length != 0) {
                        int counter = 0;
                        String[] arr = new String[4];
                        String str = "";
                        for (int i = 4; i < buf.length; i++) {
                            if ((char) buf[i] != '\n') {
                                if ((char) buf[i] != '\t') {
                                    str += String.valueOf((char) buf[i]);
                                    continue;
                                }
                                for (int j = 0; j < arr.length; j++) {
                                    if (arr[j] == null) {
                                        arr[j] = str;
                                        str = "";
                                        counter++;
                                        break;
                                    }
                                }
                                if (counter == 4) {
                                    model.addRow(new Object[]{arr[0], arr[1], arr[2], arr[3]});
                                    for (int pizda = 0; pizda < arr.length; pizda++) {
                                        arr[pizda] = null;
                                    }
                                    counter = 0;
                                }
                            }
                        }
                    }


                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else if (Objects.equals(arrayList[1], "txt")) {
                try {
                    List<String> strings = Files.readAllLines(file.toPath());
                    int count = 0;
                    String[] arr = new String[4];
                    for (var i : strings) {
                        if (i.isEmpty()) {
                            continue;
                        }
                        arr[count] = i;
                        count++;
                        if (count == 4) {
                            count = 0;
                            model.addRow(new Object[]{arr[0], arr[1], arr[2], arr[3]});
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }


        /*DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        try {
            if (model.getRowCount() == 0) {
                for (int i = 0; i < array.size(); i++) {
                    String lowerBound = array.get(i).getLowerBound();
                    String upperBound = array.get(i).getUpperBound();
                    String step = array.get(i).getStep();
                    String result = array.get(i).getResult();
                    model.addRow(new Object[]{lowerBound, upperBound, step, result});
                }
            } else {
                throw new ClearTableException("Перед заполнением таблицу нужно полностью очистить");
            }
        } catch (ClearTableException ex) {
            JOptionPane.showMessageDialog(this, "Таблицу нужно очистить перед заполнением");
        }*/
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Path pathToFile = Paths.get("fileText.txt");
        if (!Files.exists(pathToFile)) {
            try {
                Files.createFile(pathToFile);
            } catch (IOException ex) {
                Logger.getLogger(ContackEditorUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                Files.writeString(pathToFile, "");
            } catch (IOException ex) {
                Logger.getLogger(ContackEditorUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        for (int i = 0; i < array.size(); i++) {
            if (i == 0) {
                try {
                    StringBuilder sb = new StringBuilder();
                    sb.append(array.get(i).getLowerBound()).append("\n");
                    sb.append(array.get(i).getUpperBound()).append("\n");
                    sb.append(array.get(i).getStep()).append("\n");
                    sb.append(array.get(i).getResult()).append("\n");
                    Files.writeString(pathToFile, sb);
                } catch (IOException ex) {
                    Logger.getLogger(ContackEditorUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    StringBuilder sb = new StringBuilder();
                    sb.append("\n").append(array.get(i).getLowerBound()).append("\n");
                    sb.append(array.get(i).getUpperBound()).append("\n");
                    sb.append(array.get(i).getStep()).append("\n");
                    sb.append(array.get(i).getResult()).append("\n");
                    Files.writeString(pathToFile, sb, APPEND);
                } catch (IOException ex) {
                    Logger.getLogger(ContackEditorUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        JOptionPane.showMessageDialog(this, "Информация из таблицы сохранена в файл fileText");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void saveAsBinary(java.awt.event.ActionEvent evt) throws IOException {
        Path pathToFile = Paths.get("fileBin.bin");
        File file = new File(pathToFile.toString());
        if (!Files.exists(pathToFile)) {
            try {
                Files.createFile(pathToFile);
            } catch (IOException ex) {
                Logger.getLogger(ContackEditorUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                Files.writeString(pathToFile, "");
            } catch (IOException ex) {
                Logger.getLogger(ContackEditorUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try (FileOutputStream fout = new FileOutputStream(file);
             ObjectOutputStream out = new ObjectOutputStream(fout)) {
            for (var i : array) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(i.getLowerBound()).append("\t");
                stringBuilder.append(i.getUpperBound()).append("\t");
                stringBuilder.append(i.getStep()).append("\t");
                stringBuilder.append(i.getResult()).append("\t\n");
                fout.write(stringBuilder.toString().getBytes(StandardCharsets.UTF_8));
                /*out.writeObject(stringBuilder.toString());
                out.flush();*/
            }
        }

        JOptionPane.showMessageDialog(this, "Информация из таблицы сохранена в файл fileBin");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContackEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContackEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContackEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContackEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContackEditorUI().setVisible(true);
            }
        });
    }


    private Boolean checkValue(Integer value) {
        if (value > 0.0000001 && value < 1000000) {
            return true;
        } else {
            return false;
        }

    }

    private final ArrayList<RecIntegral> array = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
